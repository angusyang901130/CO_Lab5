$date
	Thu May 26 17:50:09 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 1 " rst_n $end
$var integer 32 # count [31:0] $end
$var integer 32 $ fp_w [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$scope module ALU_Ctrl $end
$var wire 2 % ALUOp [1:0] $end
$var wire 4 & instr [3:0] $end
$var reg 4 ' ALU_Ctrl_o [3:0] $end
$upscope $end
$scope module Branch_Adder $end
$var wire 32 ( src1_i [31:0] $end
$var wire 32 ) src2_i [31:0] $end
$var reg 32 * sum_o [31:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 + MemRead_i $end
$var wire 1 , MemWrite_i $end
$var wire 32 - addr_i [31:0] $end
$var wire 1 . clk_i $end
$var wire 32 / data_i [31:0] $end
$var wire 32 0 data_o [31:0] $end
$var integer 32 1 i [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 32 2 instr_i [31:0] $end
$var wire 7 3 opcode [6:0] $end
$var wire 3 4 funct3 [2:0] $end
$var wire 3 5 Instr_field [2:0] $end
$var wire 10 6 Ctrl_o [9:0] $end
$var reg 2 7 ALUOp [1:0] $end
$var reg 1 8 ALUSrc $end
$var reg 1 9 Branch $end
$var reg 1 : Jump $end
$var reg 1 ; MemRead $end
$var reg 1 < MemWrite $end
$var reg 1 = MemtoReg $end
$var reg 1 > RegWrite $end
$upscope $end
$scope module EXEtoMEM $end
$var wire 3 ? Mem_i [2:0] $end
$var wire 3 @ WB_i [2:0] $end
$var wire 5 A WBreg_i [4:0] $end
$var wire 32 B alu_ans_i [31:0] $end
$var wire 1 C clk_i $end
$var wire 32 D instr_i [31:0] $end
$var wire 32 E pc_add4_i [31:0] $end
$var wire 1 F rst_i $end
$var wire 32 G rtdata_i [31:0] $end
$var wire 1 H zero_i $end
$var reg 3 I Mem_o [2:0] $end
$var reg 3 J WB_o [2:0] $end
$var reg 5 K WBreg_o [4:0] $end
$var reg 32 L alu_ans_o [31:0] $end
$var reg 32 M instr_o [31:0] $end
$var reg 32 N pc_add4_o [31:0] $end
$var reg 32 O rtdata_o [31:0] $end
$var reg 1 P zero_o $end
$upscope $end
$scope module FWUnit $end
$var wire 5 Q EXEMEM_RD [4:0] $end
$var wire 2 R EXEMEM_RegWrite [1:0] $end
$var wire 5 S IDEXE_RS1 [4:0] $end
$var wire 5 T IDEXE_RS2 [4:0] $end
$var wire 5 U MEMWB_RD [4:0] $end
$var wire 2 V MEMWB_RegWrite [1:0] $end
$var reg 2 W ForwardA [1:0] $end
$var reg 2 X ForwardB [1:0] $end
$upscope $end
$scope module Hazard_detection_obj $end
$var wire 1 Y IDEXE_memRead $end
$var wire 5 Z IDEXE_regRd [4:0] $end
$var wire 5 [ IFID_regRs [4:0] $end
$var wire 5 \ IFID_regRt [4:0] $end
$var reg 1 ] IFID_write $end
$var reg 1 ^ PC_write $end
$var reg 1 _ control_output_select $end
$upscope $end
$scope module IDtoEXE $end
$var wire 3 ` Exe_i [2:0] $end
$var wire 2 a Mem_i [1:0] $end
$var wire 3 b WB_i [2:0] $end
$var wire 5 c WBreg_i [4:0] $end
$var wire 4 d alu_ctrl_instr [3:0] $end
$var wire 1 e clk_i $end
$var wire 32 f data1_i [31:0] $end
$var wire 32 g data2_i [31:0] $end
$var wire 32 h immgen_i [31:0] $end
$var wire 32 i instr_i [31:0] $end
$var wire 32 j pc_add4_i [31:0] $end
$var wire 1 k rst_i $end
$var reg 3 l Exe_o [2:0] $end
$var reg 2 m Mem_o [1:0] $end
$var reg 3 n WB_o [2:0] $end
$var reg 5 o WBreg_o [4:0] $end
$var reg 4 p alu_ctrl_input [3:0] $end
$var reg 32 q data1_o [31:0] $end
$var reg 32 r data2_o [31:0] $end
$var reg 32 s immgen_o [31:0] $end
$var reg 32 t instr_o [31:0] $end
$var reg 32 u pc_add4_o [31:0] $end
$upscope $end
$scope module IFtoID $end
$var wire 1 v IFID_write $end
$var wire 32 w address_i [31:0] $end
$var wire 1 x clk_i $end
$var wire 1 y flush $end
$var wire 32 z instr_i [31:0] $end
$var wire 32 { pc_add4_i [31:0] $end
$var wire 1 | rst_i $end
$var reg 32 } address_o [31:0] $end
$var reg 32 ~ instr_o [31:0] $end
$var reg 32 !" pc_add4_o [31:0] $end
$upscope $end
$scope module IM $end
$var wire 32 "" addr_i [31:0] $end
$var wire 32 #" instr_o [31:0] $end
$var integer 32 $" i [31:0] $end
$upscope $end
$scope module ImmGen $end
$var wire 32 %" instr_i [31:0] $end
$var wire 7 &" opcode [6:0] $end
$var wire 3 '" func3 [2:0] $end
$var reg 32 (" Imm_Gen_o [31:0] $end
$upscope $end
$scope module MEMtoWB $end
$var wire 32 )" DM_i [31:0] $end
$var wire 3 *" WB_i [2:0] $end
$var wire 5 +" WBreg_i [4:0] $end
$var wire 32 ," alu_ans_i [31:0] $end
$var wire 1 -" clk_i $end
$var wire 32 ." pc_add4_i [31:0] $end
$var wire 1 /" rst_i $end
$var reg 32 0" DM_o [31:0] $end
$var reg 3 1" WB_o [2:0] $end
$var reg 5 2" WBreg_o [4:0] $end
$var reg 32 3" alu_ans_o [31:0] $end
$var reg 32 4" pc_add4_o [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 32 5" data0_i [31:0] $end
$var wire 32 6" data1_i [31:0] $end
$var wire 1 7" select_i $end
$var reg 32 8" data_o [31:0] $end
$upscope $end
$scope module MUX_ALU_src1 $end
$var wire 32 9" data0_i [31:0] $end
$var wire 32 :" data1_i [31:0] $end
$var wire 32 ;" data2_i [31:0] $end
$var wire 2 <" select_i [1:0] $end
$var reg 32 =" data_o [31:0] $end
$upscope $end
$scope module MUX_ALU_src2 $end
$var wire 32 >" data0_i [31:0] $end
$var wire 32 ?" data1_i [31:0] $end
$var wire 32 @" data2_i [31:0] $end
$var wire 2 A" select_i [1:0] $end
$var reg 32 B" data_o [31:0] $end
$upscope $end
$scope module MUX_MemtoReg $end
$var wire 32 C" data0_i [31:0] $end
$var wire 32 D" data1_i [31:0] $end
$var wire 32 E" data2_i [31:0] $end
$var wire 2 F" select_i [1:0] $end
$var reg 32 G" data_o [31:0] $end
$upscope $end
$scope module MUX_PCSrc $end
$var wire 32 H" data0_i [31:0] $end
$var wire 32 I" data1_i [31:0] $end
$var wire 1 J" select_i $end
$var reg 32 K" data_o [31:0] $end
$upscope $end
$scope module MUX_control $end
$var wire 32 L" data0_i [31:0] $end
$var wire 32 M" data1_i [31:0] $end
$var wire 1 N" select_i $end
$var reg 32 O" data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 P" PCWrite $end
$var wire 1 Q" clk_i $end
$var wire 32 R" pc_i [31:0] $end
$var wire 1 S" rst_i $end
$var reg 32 T" pc_o [31:0] $end
$upscope $end
$scope module PC_plus_4_Adder $end
$var wire 32 U" src1_i [31:0] $end
$var wire 32 V" src2_i [31:0] $end
$var reg 32 W" sum_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 X" RDaddr_i [4:0] $end
$var wire 32 Y" RDdata_i [31:0] $end
$var wire 5 Z" RSaddr_i [4:0] $end
$var wire 32 [" RSdata_o [31:0] $end
$var wire 5 \" RTaddr_i [4:0] $end
$var wire 32 ]" RTdata_o [31:0] $end
$var wire 1 ^" RegWrite_i $end
$var wire 1 _" clk_i $end
$var wire 1 `" rst_i $end
$upscope $end
$scope module SL1 $end
$var wire 32 a" data_i [31:0] $end
$var reg 32 b" data_o [31:0] $end
$upscope $end
$scope module alu $end
$var wire 4 c" ALU_control [3:0] $end
$var wire 1 d" rst_n $end
$var wire 32 e" src1 [31:0] $end
$var wire 32 f" src2 [31:0] $end
$var reg 1 g" Zero $end
$var reg 32 h" result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx h"
xg"
bz f"
bz e"
zd"
bz c"
bz0 b"
bz a"
z`"
z_"
z^"
bx ]"
bz \"
bx ["
bz Z"
bz Y"
bz X"
bx W"
bz V"
bz U"
bx T"
zS"
bz R"
zQ"
zP"
bx O"
zN"
bz M"
bz L"
bx K"
zJ"
bz I"
bz H"
bx G"
bz F"
bz E"
bz D"
bz C"
bx B"
bz A"
bz @"
bz ?"
bz >"
bx ="
bz <"
bz ;"
bz :"
bz 9"
bx 8"
z7"
bz 6"
bz 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
z/"
bz ."
z-"
bz ,"
bz +"
bz *"
bz )"
b0 ("
bz '"
bz &"
bz %"
b100000 $"
bx #"
bz ""
bx !"
bx ~
bx }
z|
bz {
bz z
zy
zx
bz w
zv
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
zk
bz j
bz i
bz h
bz g
bz f
ze
bz d
bz c
bz b
bz a
bz `
x_
x^
x]
bz \
bz [
bz Z
zY
bx X
bx W
bz V
bz U
bz T
bz S
bz R
bz Q
xP
bx O
bx N
bx M
bx L
bx K
bx J
bx I
zH
bz G
zF
bz E
bz D
zC
bz B
bz A
bz @
bz ?
x>
x=
x<
x;
x:
x9
x8
bx 7
bxzxxx 6
bz 5
bz 4
bz 3
bz 2
b10000000 1
bx 0
bz /
z.
bz -
z,
z+
bx *
bz )
bz (
bx '
bz &
bz %
b10000000000000000000000000000011 $
b0 #
0"
0!
$end
#25000
b1 #
1!
#50000
0!
1"
#75000
b10 #
1!
#100000
0!
#125000
b11 #
1!
#150000
0!
#175000
b100 #
1!
#200000
0!
#225000
b101 #
1!
#250000
0!
#275000
b110 #
1!
#300000
0!
#325000
b111 #
1!
#350000
0!
#375000
b1000 #
1!
#400000
0!
#425000
b1001 #
1!
#450000
0!
#475000
b1010 #
1!
#500000
0!
#525000
b1011 #
1!
#550000
0!
#575000
b1100 #
1!
#600000
0!
#625000
b1101 #
1!
#650000
0!
#675000
b1110 #
1!
#700000
0!
#725000
b1111 #
1!
#750000
0!
#775000
b10000 #
1!
#800000
0!
#825000
b10001 #
1!
#850000
0!
#875000
b10010 #
1!
#900000
0!
#925000
b10011 #
1!
#950000
0!
#975000
b10100 #
1!
#1000000
0!
#1025000
b10101 #
1!
#1050000
0!
#1075000
b10110 #
1!
#1100000
0!
#1125000
b10111 #
1!
#1150000
0!
#1175000
b11000 #
1!
#1200000
0!
#1225000
b11001 #
1!
#1250000
0!
#1275000
b11010 #
1!
#1300000
0!
#1325000
b11011 #
1!
#1350000
0!
#1375000
b11100 #
1!
#1400000
0!
#1425000
b11101 #
1!
#1450000
0!
#1475000
b11110 #
1!
#1500000
0!
#1525000
b11111 #
1!
#1550000
0!
#1575000
b100000 #
1!
#1600000
0!
#1625000
b100001 #
1!
#1650000
0!
#1675000
b100010 #
1!
#1700000
0!
#1725000
b100011 #
1!
#1750000
0!
#1775000
b100100 #
1!
#1800000
0!
